1. git bash
2. git status  查看状态      git status -s 简略查看状态   未跟踪
3. git add 文件名  将文件提交到暂存区   已跟踪  绿色的A 绿色的M
4. git commit -m "提交消息" 提交已暂存的文件 到 Git仓库
5. 对已提交的文件进行了修改，但没有放入暂存区， 再 git status 查看状态会变为已修改的红色 M
6. 再次 git add 文件名 把已跟踪、且已修改的文件放入暂存区   绿色的A 绿色的M
7. git commit -m "提交消息" 提交已暂存的文件 到 Git仓库
8. git status  查看状态     变为 Unmodified 

9.   git checkout -- 文件名   撤销对文件的修改

10. git add . 把所有新增和已修改的文件放入暂存区
11. git reset HEAD 文件名  把文件从暂存区移除
12. git reset HEAD .  把所有文件从暂存区移除

13. 工作区-->暂存区-->Git仓库  跳过使用暂存区 git commit -a -m "描述消息"
14. 移除文件：
·   从 Git 仓库和工作区中同时移除对应的文件  git rm -f 文件名
·   只从 Git 仓库中移除文件，但保留工作区中的 文件 git rm -r --cached 文件名

15.  git log 按时间先后顺序列出所有提交历史，最近的提交排在最上面 
     git log -2  只展示最新两条提交历史
     git log -2 --pretty=oneline 在一行上显示最近两条提交历史
     git log -2 -- pretty=format:"%h | %an |%ar |%s" %h 提交的简写哈希值 %an作者名字 %ar作者修订日期，按多久以前的方式显示  %s提交说明 

16. git log --pretty=oneline 在一行上显示所有的提交历史 
17.  git reset --hard <CommitID> 根据指定的提交ID 回退到指定版本
18. git reflog --pretty=oneline 在旧版本中，查看命令操作的历史
19. git reset --hard <CommitID> 再次根据最新的提交 ID，跳转到最新版本

git branch                  查看分支
git branch 分支名称         基于当前所处分支创建分支
git checkout 分支名称       切换分支
git checkout -b 分支名称    快速创建并切换分支
git merge 分支名称                    在 main 分支上运行 git merge 命令，将 分支代码合并到main分支
git branch -d 分支名称            删除分支

假设：在把 reg 分支 合并到 main 分支期间。代码发生了冲突
git checkout main
git merge reg
打开包含冲突的文件，手动解决冲突之后，再执行如下命令：
git add .
git commit -m "解决了分支合并冲突的问题"


echo "# VoiceEmoRec" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main 用于将本地分支 main 重命名为 main。这个命令通常用于将本地分支 main 与远程分支 main 保持一致，或者在创建新的本地分支时，需要将本地分支名称设置为 main
git remote add origin https://github.com/Lianyuer/VoiceEmoRec.git
git push -u origin main
只有第一次推送才需要    git push -u origin main
以后的推送只需          git push

# -u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数
git push -u 远程仓库的别名 本地分支名称:远程分支名称
# 实际案例
git push -u origin payment:pay

# 如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：
git push -u origin payment

git remote show 远程仓库名称              查看远程仓库所有分支列表

# 从远程仓库中，把对应的远程分支下载到本地仓库，保持本地分支和远程分支名称相同
git checkout 远程分支的名称
示例：
git checkout pay

# 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名
git checkout -b 本地分支名称 远程仓库名称/远程分支名称
# 示例
git checkout -b payment origin/pay

# 从远程仓库，拉取当前分支最新的代码，保持当前分支的代码和远程分支代码一致
git pull  远程分支名  本地分支名

# 删除远程仓库中，指定名称的远程分支   注意区分删除本地分支： git branch -d 分支名称
git push 远程仓库名称 --delete 远程分支名称
# 示例：
git push origin --delete pay


总结：
① 能够掌握 Git 中基本命令的使用
     ·   git init
     ·   git add .
     ·   git commit -m "提交消息" 
     ·   git status 和 git status-s
② 能够使用 Github 创建和维护远程仓库
     ·   能够配置 Github 的SSH访问
     ·   能够将本地仓库上传到 Github

③ 能够掌握 Git 中基本命令的使用
     ·   git checkout -b 新分支名称
     ·   git push -u origin 新分支名称
     ·   git checkout 分支名称
     ·   git branch
     ·   git reset HEAD 要移除的文件名称 【移除全部文件用 git reset HEAD .】
     ·   只从 Git 仓库中移除文件，但保留工作区中的 文件 git rm -r --cached 文件名



如果先把代码git到了gitee上，然后再要git到github，会报错 error: remote origin already exists.
解决办法：
1、先输入git remote rm origin 删除关联的origin的远程库
2、关联自己的仓库 git remote add origin https://github.com/xxxxxx.git
3、git branch -M main
4、git push -u origin main

